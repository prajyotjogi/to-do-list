{"version":3,"sources":["App.js","Todolist/Todolist.js","serviceWorker.js","index.js"],"names":["App","Component","i","todolist","state","addToDo","push","document","getElementById","value","length","node","createElement","textnode","createTextNode","appendChild","setAttribute","setState","deleteToDo","taskNumber","splice","toString","remove","j","innerHTML","className","id","placeholder","onClick","this","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+OAIqBA,G,MCFiBC,Y,2MDIpCC,EAAE,E,EACFC,SAAY,G,EAIZC,MAAQ,G,EAERC,QAAU,WAIN,IADA,EAAKF,SAASG,KAAKC,SAASC,eAAe,aAAaC,OACnD,EAAKP,EAAE,EAAKC,SAASO,OAAO,EAAKR,IAAI,CAExC,IAAIS,EAAOJ,SAASK,cAAc,MAC9BC,EAAWN,SAASO,eAAe,EAAKX,SAAS,EAAKD,IAC1DS,EAAKI,YAAYF,GACjBF,EAAKK,aAAa,KAAK,EAAKd,GAC5BK,SAASC,eAAe,SAASO,YAAYJ,GAK/C,EAAKM,SAAS,K,EAMhBC,WAAa,WAEX,IAAIC,EAAWZ,SAASC,eAAe,cAAcC,MAErD,GAAGU,EAAW,EAAE,EAAKjB,EAAE,CACrB,EAAKA,EAAE,EAAKA,EAAE,EACd,EAAKC,SAASiB,OAAOD,EAAW,EAAE,GAEvBZ,SAASC,gBAAgBW,EAAW,GAAGE,YAE7CC,SACL,IAAI,IAAIC,EAAEJ,EAAW,EAAEI,EAAE,EAAKpB,SAASO,OAAOa,IAC5ChB,SAASC,gBAAgBe,EAAE,GAAGF,YAAYL,aAAa,KAAKO,GAE9DhB,SAASC,eAAe,gBAAgBgB,UAAU,QAQlDjB,SAASC,eAAe,gBAAgBgB,UAAU,yBAGpD,EAAKP,SAAS,K,wEAOhB,OACE,yBAAKQ,UAAU,uBACb,yBAAKA,UAAU,2BACf,uCACE,wBAAIA,UAAU,WAAWC,GAAG,WAI9B,yBAAKD,UAAU,2BACb,yBAAKA,UAAU,2BACb,2BAAOC,GAAG,YAAYC,YAAY,mBAAmBF,UAAU,UAC/D,4BAAQG,QAASC,KAAKxB,QAASoB,UAAU,UAAzC,cAEF,yBAAKA,UAAU,2BACb,2BAAOC,GAAG,aAAaC,YAAY,8BAA8BF,UAAU,UAC3E,4BAAQG,QAASC,KAAKX,WAAYO,UAAU,UAA5C,qBAEF,uBAAGC,GAAG,uB,GA/EiBzB,cEQb6B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS7B,SAASC,eAAe,SD6H3C,kBAAmB6B,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.9a0c12b8.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\nimport './App.css';\r\nimport Todolist from './Todolist/Todolist'\r\n\r\nexport default class App extends Component {\r\n\r\n  i=0;\r\n  todolist  = [\r\n      \r\n    ]\r\n  \r\n  state = {}\r\n\r\n  addToDo = ()=>{\r\n    //console.log(this.todolist);\r\n    \r\n      this.todolist.push(document.getElementById(\"inputToDo\").value);\r\n      for(;this.i<this.todolist.length;this.i++){\r\n\r\n        var node = document.createElement(\"LI\");\r\n        var textnode = document.createTextNode(this.todolist[this.i]);\r\n        node.appendChild(textnode);\r\n        node.setAttribute(\"id\",this.i);\r\n        document.getElementById(\"ulist\").appendChild(node);\r\n\r\n      }\r\n      \r\n      \r\n      this.setState({\r\n\r\n      });\r\n      //console.log(this.todolist);\r\n    }\r\n    \r\n    deleteToDo = ()=>{\r\n\r\n      let taskNumber=document.getElementById(\"deleteToDo\").value;\r\n      //console.log(taskNumber);\r\n      if(taskNumber-1<this.i){\r\n        this.i=this.i-1;\r\n        this.todolist.splice(taskNumber-1,1);\r\n        \r\n        let task = document.getElementById((taskNumber-1).toString());\r\n\r\n        task.remove();\r\n        for(let j=taskNumber-1;j<this.todolist.length;j++){\r\n          document.getElementById((j+1).toString()).setAttribute(\"id\",j);\r\n        }\r\n        document.getElementById(\"errorMessage\").innerHTML=\"\";\r\n        //task.setAttribute(\"class\",\"Strikethrough\");\r\n        //console.log(task);\r\n        //console.log(this.todolist);\r\n        \r\n        //document.getElementById(\"errorMessage\").setStyle({display:'none'});\r\n      }\r\n      else{\r\n        document.getElementById(\"errorMessage\").innerHTML=\"Enter valid taskNumber\";\r\n\r\n      }\r\n      this.setState({\r\n\r\n      });\r\n    }\r\n  \r\n\r\n  render(){\r\n    return (\r\n      <div className=\"App col-12 col-s-12\" >\r\n        <div className=\"Divider1 col-12 col-s-6\">\r\n        <h2>To do's</h2>\r\n          <ol className=\"Todolist\" id=\"ulist\">\r\n          \r\n          </ol>\r\n        </div>\r\n        <div className=\"Divider2 col-12 col-s-6\">\r\n          <div className=\"Divider1 col-12 col-s-6\">\r\n            <input id=\"inputToDo\" placeholder=\"Enter a new todo\" className=\"input\"/>\r\n            <button onClick={this.addToDo} className=\"button\">Add To do</button>\r\n          </div>\r\n          <div className=\"Divider1 col-12 col-s-6\">\r\n            <input id=\"deleteToDo\" placeholder=\"Enter todo number to delete\" className=\"input\"/>\r\n            <button onClick={this.deleteToDo} className=\"button\">Finish the To do</button>\r\n          </div>\r\n          <p id=\"errorMessage\"></p>\r\n\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n","import React, {Component} from 'react';\r\n\r\nexport default class Todolist extends Component {\r\n\r\n\t\r\n\trender(){\r\n\t\treturn(\r\n\t\t\t<div>\r\n\t\t\t\t\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n} ","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}